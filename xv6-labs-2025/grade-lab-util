#!/usr/bin/env python3

import re
from gradelib import *

r = Runner(save("xv6.out"))

@test(5, "sleep, no arguments")
def test_sleep_no_args():
    r.run_qemu(shell_script([
        'sleep'
    ]))
    r.match(no=["exec .* failed", "$ sleep\n$"])

@test(5, "sleep, returns")
def test_sleep_no_args():
    r.run_qemu(shell_script([
        'sleep',
        'echo OK'
    ]))
    r.match('^OK$', no=["exec .* failed", "$ sleep\n$"])

@test(10, "sleep, makes syscall")
def test_sleep():
    r.run_qemu(shell_script([
        'sleep 10',
        'echo FAIL'
    ]), stop_breakpoint('sys_pause'))
    r.match('\\$ sleep 10', no=['FAIL'])

@test(10, "sixfive_test")
def test_sixfive_test():
    r.run_qemu(shell_script([
        'sixfive sixfive.txt',
    ]))
    r.match('^5', '^100', '^18', '^6')

@test(10, "sixfive_readme")
def test_sixfive_readme():
    r.run_qemu(shell_script([
        'sixfive README',
    ]))
    r.match('^6', '^6', '^1810','^6', '^1810')

@test(10, "sixfive_all")
def test_sixfive_readme():
    r.run_qemu(shell_script([
        'sixfive sixfive.txt README',
    ]))
    r.match('^5', '^100', '^18', '^6', '^6', '^6', '^1810','^6', '^1810')

@test(10, "memdump, examples")
def test_memdump_examples():
    r.run_qemu(shell_script([ "memdump" ]))
    r.match('^61810', '^2025',
            '^a string',
            '^another',
            '^1819438967',
            '^100',
            '^z',
            '^xyzzy',
            '^hello',
            '^w',
            '^d')

@test(10, "memdump, format ii, S, p")
def test_memdump_examples():
    r.run_qemu(shell_script([ "echo abcdefgh12345678 | memdump ii",
                              "echo abcdefgh12345678 | memdump S",
                              "echo abcdefgh12345678 | memdump p" ]))
    r.match('^1684234849',
            '^1751606885',
            '^abcdefgh12345678',
            '^64636261')

@test(10, "find, in current directory")
def test_find_curdir():
    fn = random_str()
    r.run_qemu(shell_script([
        'echo > %s' % fn,
        'find . %s' % fn
    ]))
    r.match('./%s' % fn)
    r.match(no=["./README", "README"])

@test(10, "find, in sub-directory")
def test_find_subdir():
    dd = random_str()
    fn = random_str()
    r.run_qemu(shell_script([
        'echo > %s' % fn,
        'mkdir %s' % dd,
        'echo > %s/%s' % (dd, fn),
        'find %s %s' % (dd, fn)
    ]))
    r.match('%s/%s' % (dd, fn))
    r.match(no=['./%s' % fn])

@test(10, "find, recursive")
def test_find_recursive():
    needle = random_str()
    dirs = [random_str() for _ in range(3)]
    r.run_qemu(shell_script([
        'mkdir %s' % dirs[0],
        'echo > %s/%s' % (dirs[0], needle),
        'mkdir %s/%s' % (dirs[0], dirs[1]),
        'echo > %s/%s/%s' % (dirs[0], dirs[1], needle),
        'mkdir %s' % dirs[2],
        'echo > %s/%s' % (dirs[2], needle),
        'find . %s' % needle
    ]))
    r.match('./%s/%s' % (dirs[0], needle),
            './%s/%s/%s' % (dirs[0], dirs[1], needle),
            './%s/%s' % (dirs[2], needle))

@test(10, "exec")
def test_find_exec():
    r.run_qemu(shell_script([
        'find . wc -exec echo',
    ]))
    r.match('^./wc$')

@test(10, "exec, multiple args")
def test_find_exec_args():
    r.run_qemu(shell_script([
        'find . findtest.sh -exec grep hello',
    ]))
    matches = re.findall("hello", r.qemu.output)
    assert_equal(len(matches), 5, "Number of appearances of 'hello'")


@test(10, "exec, recursive find")
def test_test_find_sh():
    r.run_qemu(shell_script([
        'sh < findtest.sh',
        'echo DONE',
    ], 'DONE'))
    matches = re.findall("hello", r.qemu.output)
    assert_equal(len(matches), 3, "Number of appearances of 'hello'")

@test(1, "time")
def test_time():
    check_time()
    
run_tests()
